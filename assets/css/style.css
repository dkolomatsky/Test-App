@charset "UTF-8";
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
html{
  line-height:1.15;
  -webkit-text-size-adjust:100%;
}
body{
  margin:0;
}
main{
  display:block;
}
h1{
  font-size:2em;
  margin:0.67em 0;
}
hr{
  box-sizing:content-box;
  height:0;
  overflow:visible;
}
pre{
  font-family:monospace, monospace;
  font-size:1em;
}
a{
  background-color:transparent;
}
abbr[title]{
  border-bottom:none;
  text-decoration:underline;
  text-decoration:underline dotted;
}
b,
strong{
  font-weight:bolder;
}
code,
kbd,
samp{
  font-family:monospace, monospace;
  font-size:1em;
}
small{
  font-size:80%;
}
sub,
sup{
  font-size:75%;
  line-height:0;
  position:relative;
  vertical-align:baseline;
}

sub{
  bottom:-0.25em;
}

sup{
  top:-0.5em;
}
img{
  border-style:none;
}
button,
input,
optgroup,
select,
textarea{
  font-family:inherit;
  font-size:100%;
  line-height:1.15;
  margin:0;
}
button,
input{
  overflow:visible;
}
button,
select{
  text-transform:none;
}
button,
[type=button],
[type=reset],
[type=submit]{
  -webkit-appearance:button;
}
button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner{
  border-style:none;
  padding:0;
}
button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring{
  outline:1px dotted Button Text;
}
fieldset{
  padding:0.35em 0.75em 0.625em;
}
legend{
  box-sizing:border-box;
  color:inherit;
  display:table;
  max-width:100%;
  padding:0;
  white-space:normal;
}
progress{
  vertical-align:baseline;
}
textarea{
  overflow:auto;
}
[type=checkbox],
[type=radio]{
  box-sizing:border-box;
  padding:0;
}
[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button{
  height:auto;
}
[type=search]{
  -webkit-appearance:textfield;
  outline-offset:-2px;
}
[type=search]::-webkit-search-decoration{
  -webkit-appearance:none;
}
::-webkit-file-upload-button{
  -webkit-appearance:button;
  font:inherit;
}
details{
  display:block;
}
summary{
  display:list-item;
}
template{
  display:none;
}
[hidden]{
  display:none;
}
.header-content__container, .header-menu__container{
  display:grid;
  max-width:1340px;
  margin:0 auto;
  padding-right:20px;
  padding-left:20px;
}

*,
*::after,
*::before{
  box-sizing:border-box;
}

html{
  font-family:"Roboto", sans-serif;
  font-size:16px;
  font-weight:300;
  line-height:1.15;
  overflow-y:scroll;
}

body{
  margin:0 auto;
}

h1{
  font-family:"Roboto Slab", serif;
  font-size:3.75rem;
  font-weight:300;
  line-height:1.2em;
  text-align:center;
  letter-spacing:0.08em;
  color:#fff;
}

a{
  text-decoration:none;
  color:#fff;
}

.btn{
  font-weight:400;
  line-height:1.2em;
  display:flex;
  height:60px;
  padding:0.5em 1em;
  transition:background-color 0.5s;
  letter-spacing:0.1em;
  align-items:center;
  justify-content:center;
}
.btn--light{
  width:250px;
  border:2px solid #fff;
  background-color:rgba(255, 255, 255, 0.1);
}
.btn--primary{
  width:350px;
  border:2px solid #2d3651;
  background-color:rgba(45, 54, 81, 0.8);
}
.btn:hover, .btn:focus{
  background-color:#d66926;
}

.header{
  position:relative;
  display:grid;
  min-height:100vh;
  padding:150px 0;
  background-color:#2d3651;
  background-position:center;
  background-size:cover;
  align-items:center;
}

.header-overlay{
  opacity:0.8;
  background-color:#2d3651;
  background-position:center;
  background-size:cover;
  position:absolute;
  top:0;
  right:0;
  bottom:0;
  left:0;
  margin:0;
}

.header-menu{
  position:absolute;
  z-index:2;
  top:0;
  right:0;
  left:0;
}
.header-menu__container{
  gap:20px;
  grid-template-columns:auto 1fr;
  align-items:center;
}

.header-logo{
  font-size:1.5rem;
  font-weight:400;
  text-align:center;
  letter-spacing:0.22em;
  color:#fff;
}
.header-logo__link{
  display:flex;
  padding:20px 20px 20px 0;
  align-items:center;
  flex-wrap:nowrap;
}
.header-logo__accent{
  line-height:1.15em;
  display:inline-block;
  margin-right:4px;
  padding:14px 1px 13px 5px;
  border:3px solid #d53d27;
}

.header-navbar{
  font-size:1.125rem;
  font-weight:400;
  line-height:1.25em;
  display:flex;
  text-align:center;
  letter-spacing:0.1em;
  color:#fff;
  justify-content:flex-end;
}
.header-navbar__btn{
  position:relative;
  width:30px;
  height:22.5px;
  margin:25px 0;
  cursor:pointer;
  transition:0.5s ease-in-out;
  transform:rotate(0deg);
}
.header-navbar__btn-row{
  position:absolute;
  display:block;
  width:50%;
  height:3px;
  transition:0.25s ease-in-out;
  transform:rotate(0deg);
  opacity:1;
  background:#fff;
}
.header-navbar__btn-row:nth-child(even){
  left:50%;
  border-radius:0 3px 3px 0;
}
.header-navbar__btn-row:nth-child(odd){
  left:0;
  border-radius:9px 0 0 3px;
}
.header-navbar__btn-row:nth-child(1), .header-navbar__btn-row:nth-child(2){
  top:0;
}
.header-navbar__btn-row:nth-child(3), .header-navbar__btn-row:nth-child(4){
  top:9px;
}
.header-navbar__btn-row:nth-child(5), .header-navbar__btn-row:nth-child(6){
  top:18px;
}
.header-navbar__btn.active span:nth-child(1), .header-navbar__btn.active span:nth-child(6){
  transform:rotate(45deg);
}
.header-navbar__btn.active span:nth-child(2), .header-navbar__btn.active span:nth-child(5){
  transform:rotate(-45deg);
}
.header-navbar__btn.active span:nth-child(1){
  top:3.5px;
  left:2.5px;
}
.header-navbar__btn.active span:nth-child(2){
  top:3.5px;
  left:calc(50% - 2.5px);
}
.header-navbar__btn.active span:nth-child(3){
  left:-50%;
  opacity:0;
}
.header-navbar__btn.active span:nth-child(4){
  left:100%;
  opacity:0;
}
.header-navbar__btn.active span:nth-child(5){
  top:14.5px;
  left:2.5px;
}
.header-navbar__btn.active span:nth-child(6){
  top:14.5px;
  left:calc(50% - 2.5px);
}
.header-navbar__list{
  margin:0;
  padding:0;
  list-style:none;
}
.header-navbar__list.active{
  position:absolute;
  top:100%;
  right:20px;
  display:block;
  margin-top:10px;
}
.header-navbar__link{
  display:block;
  transition:color 0.5s;
}
.header-navbar__link:hover, .header-navbar__link:focus{
  color:#d66926;
}

.header-content{
  position:relative;
  z-index:1;
}
.header-content__title{
  margin:0 0 53px 0;
}
.header-content__actions{
  display:flex;
  padding:0;
  justify-content:center;
  gap:20px;
}

.skills-container{
  display:grid;
  min-width:100%;
  grid-template-areas:"a1 a1 a2 a3" "a4 a5 a5 a6" "a7 a8 a9 a6";
}

.skill-action{
  display:flex;
  margin-top:20px;
  align-items:center;
  justify-content:center;
}

.skill-item{
  position:relative;
  display:grid;
  overflow:hidden;
  min-height:calc(33.333vh - 13.3333333333px);
  padding:20px;
  align-items:center;
  justify-items:center;
}
.skill-item__title{
  font-size:1.25rem;
  font-weight:700;
  z-index:1;
  letter-spacing:0.1em;
  position:absolute;
  top:0;
  right:0;
  bottom:0;
  left:0;
  margin:0;
}
.skill-item__image{
  transition:transform 0.5s;
  background-color:#2d3651;
  background-position:center;
  background-size:cover;
  position:absolute;
  top:0;
  right:0;
  bottom:0;
  left:0;
  margin:0;
}
.skill-item__overlay{
  transition:opacity 0.5s;
  opacity:0.8;
  background-color:#2d3651;
  position:absolute;
  top:0;
  right:0;
  bottom:0;
  left:0;
  margin:0;
}
.skill-item__link{
  display:flex;
  width:100%;
  height:100%;
  padding:20px;
  transition:color 0.5s;
  align-items:center;
  justify-content:center;
}
.skill-item:hover .skill-item__image{
  transform:scale(1.1);
}
.skill-item:hover .skill-item__link{
  color:#d66926;
}
.skill-item:hover .skill-item__overlay{
  opacity:0.95;
}

.skill-item:nth-of-type(1){
  grid-area:a1;
}

.skill-item:nth-of-type(2){
  grid-area:a2;
}

.skill-item:nth-of-type(3){
  grid-area:a3;
}

.skill-item:nth-of-type(4){
  grid-area:a4;
}

.skill-item:nth-of-type(5){
  grid-area:a5;
}

.skill-item:nth-of-type(6){
  grid-area:a6;
}

.skill-item:nth-of-type(7){
  grid-area:a7;
}

.skill-item:nth-of-type(8){
  grid-area:a8;
}

.skill-item:nth-of-type(9){
  grid-area:a9;
}

@media (min-width: 576px){
  .skills{
    padding:10px;
  }
  .skill-action{
    margin-bottom:30px;
  }
}

@media (min-height: 691px){
  .skill-item{
    min-height:calc(33.333vh - 13.3333333333px);
  }
}

@media (min-width: 768px){
  .header-navbar__btn{
    display:none;
  }
  .header-navbar__list{
    display:flex;
    justify-content:flex-end;
    gap:40px;
  }
}

@media (min-width: 992px){
  h1{
    font-size:3.75rem;
    letter-spacing:0.08em;
  }
  .btn{
    font-size:1.125rem;
  }
  .btn--light{
    width:250px;
    height:60px;
  }
  .header-content__title{
    margin:0 0 53px 0;
  }
  .skills-container{
    gap:10px;
    grid-template-areas:"a1 a1 a2 a3" "a4 a5 a5 a6" "a7 a8 a9 a6";
  }
}

@media (max-width: 991.8px) and (min-width: 768px){
  h1{
    font-size:2.5rem;
    letter-spacing:0.075em;
  }
  .btn--light{
    width:200px;
    height:50px;
  }
  .header-content__title{
    margin:0 0 43px 0;
  }
  .skills-container{
    gap:10px;
    grid-template-areas:"a1 a1 a2" "a3 a4 a4" "a5 a5 a6" "a7 a8 a6" "a7 a9 a9";
  }
}

@media (max-width: 767.8px){
  .header-menu{
    background-color:rgba(68, 89, 110, 0.25);
  }
  .header-navbar__list{
    display:none;
  }
}

@media (max-width: 767.8px) and (min-width: 576px){
  h1{
    font-size:1.875rem;
    letter-spacing:0.066em;
  }
  .btn--light{
    width:170px;
    height:40px;
  }
  .header-content__title{
    margin:0 0 33px 0;
  }
  .skills-container{
    gap:10px;
    grid-template-areas:"a1 a2" "a3 a2" "a4 a4" "a5 a6" "a5 a7" "a8 a9";
  }
}

@media (max-height: 690px){
  .skill-item{
    min-height:216.6666666667px;
  }
}

@media (max-width: 575.8px){
  h1{
    font-size:1.875rem;
    letter-spacing:0.066em;
  }
  .btn--light{
    width:170px;
    height:40px;
  }
  .btn--primary{
    width:100%;
  }
  .header-content__title{
    margin:0 0 33px 0;
  }
  .header-content__actions{
    flex-direction:column;
    align-items:center;
  }
  .skills{
    margin-bottom:20px;
  }
  .skills-container{
    gap:20px;
    grid-template-areas:"a1" "a2" "a3" "a4" "a5" "a6" "a7" "a8" "a9";
  }
}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */